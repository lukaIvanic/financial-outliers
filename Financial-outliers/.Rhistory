shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
showPrice <- function(close, datetime) {
x_vals <- datetime
y_vals <- close
return(list(x_values = x_vals, y_values = y_vals))
}
# columns: openTimeMs, open, high, low, close, volume, datetime_str
getAnalysis <- function(df){
print("@getAnalysis -> df: ")
print(df)
openTimeMs <- df$openTimeMs
openPrice <- df$open
highPrice <- df$high
lowPrice <- df$low
closePrice <- df$close
volume <- df$volume
datetime <- df$datetime
priceRange <- highPrice - lowPrice
priceChange <- closePrice - openPrice
avgVolume <- mean(volume)
dayOfWeek <- weekdays(datetime)
res <- showPrice(closePrice, datetime)
print("@getAnalysis -> res: ")
print(res)
return(res)
}
showPrice <- function(close, open, priceRange datetime) {
showPrice <- function(close, open, priceRange, datetime) {
x_vals <- datetime
y_vals <- (close - open) / (open)
return(list(x_values = close/100, y_values = y_vals))
}
# columns: openTimeMs, open, high, low, close, volume, datetime_str
getAnalysis <- function(dataframe){
openTimeMs <- dataframe$openTimeMs
openPrice <- dataframe$open
highPrice <- dataframe$high
lowPrice <- dataframe$low
closePrice <- dataframe$close
volume <- dataframe$volume
datetime <- dataframe$datetime
priceRange <- highPrice - lowPrice
priceChange <- closePrice - openPrice
avgVolume <- mean(volume)
dayOfWeek <- weekdays(datetime)
res <- showPrice(closePrice, open, priceRange, datetime)
print("@getAnalysis -> res: ")
print(res)
return(res)
}
runApp()
showPrice <- function(close, open, priceRange, datetime) {
x_vals <- datetime
y_vals <- (close - open) / (open)
return(list(x_values = x_vals, y_values = y_vals))
}
# columns: openTimeMs, open, high, low, close, volume, datetime_str
getAnalysis <- function(dataframe){
openTimeMs <- dataframe$openTimeMs
openPrice <- dataframe$open
highPrice <- dataframe$high
lowPrice <- dataframe$low
closePrice <- dataframe$close
volume <- dataframe$volume
datetime <- dataframe$datetime
priceRange <- highPrice - lowPrice
priceChange <- closePrice - openPrice
avgVolume <- mean(volume)
dayOfWeek <- weekdays(datetime)
res <- showPrice(closePrice, open, priceRange, datetime)
print("@getAnalysis -> res: ")
print(res)
return(res)
}
showPrice <- function(close, open, low, priceRange, datetime) {
x_vals <- datetime
y_vals <- low
return(list(x_values = x_vals, y_values = y_vals))
}
# columns: openTimeMs, open, high, low, close, volume, datetime_str
getAnalysis <- function(dataframe){
openTimeMs <- dataframe$openTimeMs
openPrice <- dataframe$open
highPrice <- dataframe$high
lowPrice <- dataframe$low
close <- dataframe$close
volume <- dataframe$volume
datetime <- dataframe$datetime
priceRange <- highPrice - lowPrice
priceChange <- closePrice - openPrice
avgVolume <- mean(volume)
dayOfWeek <- weekdays(datetime)
res <- showPrice(close, open, low, priceRange, datetime)
print("@getAnalysis -> res: ")
print(res)
return(res)
}
runApp()
showPrice <- function(close, open, low, priceRange, datetime) {
x_vals <- datetime
y_vals <- low
return(list(x_values = x_vals, y_values = y_vals))
}
# columns: openTimeMs, open, high, low, close, volume, datetime_str
getAnalysis <- function(dataframe){
openTimeMs <- dataframe$openTimeMs
openPrice <- dataframe$open
highPrice <- dataframe$high
lowPrice <- dataframe$low
close <- dataframe$close
volume <- dataframe$volume
datetime <- dataframe$datetime
priceRange <- highPrice - lowPrice
priceChange <- close - openPrice
avgVolume <- mean(volume)
dayOfWeek <- weekdays(datetime)
res <- showPrice(close, open, low, priceRange, datetime)
return(res)
}
showPrice <- function(close, open, low, priceRange, datetime) {
x_vals <- datetime
y_vals <- low
return(list(x_values = x_vals, y_values = y_vals))
}
# columns: openTimeMs, open, high, low, close, volume, datetime_str
getAnalysis <- function(dataframe){
openTimeMs <- dataframe$openTimeMs
openPrice <- dataframe$open
highPrice <- dataframe$high
lowPrice <- dataframe$low
close <- dataframe$closePrice
volume <- dataframe$volume
datetime <- dataframe$datetime
priceRange <- highPrice - lowPrice
priceChange <- close - openPrice
avgVolume <- mean(volume)
dayOfWeek <- weekdays(datetime)
res <- showPrice(close, open, low, priceRange, datetime)
return(res)
}
rm(list=ls())
shiny::runApp()
shiny::runApp()
runApp()
runApp()
source("C:/Users/lukai/Desktop/ProjektLokacije/Financial-outliers/analyses.R")
showPrice <- function(close, open, low, high, priceRange, datetime) {
x_vals <- datetime
y_vals <- (close-open)/close
return(list(x_values = x_vals, y_values = y_vals))
}
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(c("forecast", "ggplot2", "tseries", "lubridate"))
library(forecast)
library(ggplot2)
library(tseries)
library(lubridate)
data <- read.csv("BTCUSDT1h.csv")
# View the first few rows
head(data)
library(forecast)
library(ggplot2)
library(tseries)
library(lubridate)
data <- read.csv("BTCUSDT1h.csv")
head(data)
str(data)
data <- data[order(data$datetime), ]
btc_ts <- ts(data$close, frequency=24, start=c(year(min(data$datetime)), yday(min(data$datetime))))
library(forecast)
library(ggplot2)
library(tseries)
library(lubridate)
data <- read.csv("BTCUSDT1h.csv")
head(data)
str(data)
data <- data[order(data$datetime), ]
btc_ts <- ts(data$close, frequency=24, start=c(year(min(data$datetime)), yday(min(data$datetime))))
autoplot(btc_ts) +
ggtitle("Bitcoin Close Price Time Series") +
xlab("Time") +
ylab("Close Price (USDT)") +
theme_minimal()
decomposed <- stl(btc_ts, s.window="periodic")
autoplot(decomposed) +
ggtitle("STL Decomposition of Bitcoin Close Price")
decomposed <- stl(btc_ts, s.window="periodic")
autoplot(decomposed) +
ggtitle("STL Decomposition of Bitcoin Close Price")
autoplot(btc_ts) +
ggtitle("Bitcoin Close Price Time Series") +
xlab("Time") +
ylab("Close Price (USDT)") +
theme_minimal()
decomposed <- stl(btc_ts, s.window="periodic")
autoplot(decomposed) +
ggtitle("STL Decomposition of Bitcoin Close Price")
library(forecast)
library(ggplot2)
library(tseries)
library(lubridate)
data <- read.csv("BTCUSDT1h.csv")
head(data)
str(data)
data <- data[order(data$datetime), ]
#btc_ts <- ts(data$close, frequency=24, start=c(year(min(data$datetime)), yday(min(data$datetime))))
btc_ts <- ts(data$close, frequency=24, start=c(2024, yday(min(data$datetime))))
autoplot(btc_ts) +
ggtitle("Bitcoin Close Price Time Series") +
xlab("Time") +
ylab("Close Price (USDT)") +
theme_minimal()
decomposed <- stl(btc_ts, s.window="periodic")
autoplot(decomposed) +
ggtitle("STL Decomposition of Bitcoin Close Price")
library(forecast)
library(ggplot2)
library(tseries)
library(lubridate)
data <- read.csv("BTCUSDT1h.csv")
head(data)
str(data)
data <- data[order(data$datetime), ]
#btc_ts <- ts(data$close, frequency=24, start=c(year(min(data$datetime)), yday(min(data$datetime))))
btc_ts <- ts(data$close, frequency=24, start=c(2024, yday(min(data$datetime))))
autoplot(btc_ts) +
ggtitle("Bitcoin Close Price Time Series") +
xlab("Time") +
ylab("Close Price (USDT)") +
theme_minimal()
decomposed <- stl(btc_ts, s.window="periodic")
autoplot(decomposed) +
ggtitle("STL Decomposition of Bitcoin Close Price")
data <- read.csv("BTCUSDT1h.csv")
head(data)
str(data)
data <- data[order(data$datetime), ]
#btc_ts <- ts(data$close, frequency=24, start=c(year(min(data$datetime)), yday(min(data$datetime))))
btc_ts <- ts(data$close, frequency=24, start=c(2024,300)))
data <- data[order(data$datetime), ]
#btc_ts <- ts(data$close, frequency=24, start=c(year(min(data$datetime)), yday(min(data$datetime))))
btc_ts <- ts(data$close, frequency=24, start=c(2024,300))
#btc_ts <- ts(data$close, frequency=24, start=c(year(min(data$datetime)), yday(min(data$datetime))))
btc_ts <- ts(data$close, frequency=24, start=c(2024,300))
print(btc_ts)
#btc_ts <- ts(data$close, frequency=24, start=c(year(min(data$datetime)), yday(min(data$datetime))))
btc_ts <- ts(data$close, frequency=24, start=c(2024,200))
#btc_ts <- ts(data$close, frequency=24, start=c(year(min(data$datetime)), yday(min(data$datetime))))
btc_ts <- ts(data$close, frequency=24, start=c(2024,200))
print(btc_ts)
# Summary of the model
summary(auto_model)
data <- data[order(data$datetime), ]
#btc_ts <- ts(data$close, frequency=24, start=c(year(min(data$datetime)), yday(min(data$datetime))))
data$datetime <- ymd_hms(data$datetime_str)
desired_year <- 2024
desired_month <- 1  # January
# Filter data for January 2024
data_jan2024 <- subset(data, year(datetime) == desired_year & month(datetime) == desired_month)
# Verify the number of observations
nrow(data_jan2024)
close_prices <- data_jan2024$close
# Create the time series object
# Since the data is hourly, the frequency is 24 (hours per day)
btc_ts <- ts(close_prices, frequency = 24, start = c(desired_year, 1))
plot(btc_ts, main = "Bitcoin Closing Prices - January 2024", ylab = "Close Price", xlab = "Hour")
print(btc_ts)
autoplot(btc_ts) +
ggtitle("Bitcoin Close Price Time Series") +
xlab("Time") +
ylab("Close Price (USDT)") +
theme_minimal()
decomposed <- stl(btc_ts, s.window="periodic")
autoplot(decomposed) +
ggtitle("STL Decomposition of Bitcoin Close Price")
adf_test <- adf.test(btc_ts, alternative="stationary")
print(adf_test)
btc_diff <- diff(btc_ts, differences=1)
# Plot the differenced series
autoplot(btc_diff) +
ggtitle("First Differenced Bitcoin Close Price") +
xlab("Time") +
ylab("Differenced Close Price (USDT)") +
theme_minimal()
# Perform ADF test on differenced data
adf_test_diff <- adf.test(btc_diff, alternative="stationary")
print(adf_test_diff)
auto_model <- auto.arima(btc_ts, seasonal=TRUE, stepwise=FALSE, approximation=FALSE)
# Summary of the model
summary(auto_model)
ggAcf(btc_ts) + ggtitle("ACF of Bitcoin Close Price")
ggPacf(btc_ts) + ggtitle("PACF of Bitcoin Close Price")
manual_model <- arima(btc_ts, order=c(1,1,1), seasonal=list(order=c(1,1,1), period=24))
# Summary of the manual model
summary(manual_model)
checkresiduals(auto_model)
autoplot(auto_model$residuals) +
ggtitle("Residuals of ARIMA Model") +
xlab("Time") +
ylab("Residuals") +
theme_minimal()
